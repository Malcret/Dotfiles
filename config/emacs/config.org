#+TITLE: Emacs Config File
#+AUTHOR: Malcret
#+DESCRIPTION: Emacs config
#+Startup: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#load-first][LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#load-evil-mode][Load Evil Mode]]
- [[#buffer-move][BUFFER-MOVE]]
- [[#company][COMPANY]]
- [[#dashboard][DASHBOARD]]
- [[#diminish][DIMINISH]]
- [[#dired][DIRED]]
- [[#flycheck][FLYCHECK]]
- [[#general-behavior][GENERAL BEHAVIOR]]
  - [[#disable-backup-files][Disable Backup Files]]
- [[#general-keybindings][GENERAL KEYBINDINGS]]
  - [[#reload-emacs][Reload Emacs]]
- [[#indentation][INDENTATION]]
  - [[#change-default-indentation-and-tab-behavior][Change default indentation and TAB behavior.]]
  - [[#language-specific-behavior][Language Specific behavior]]
  - [[#aggressive-indent][Aggressive Indent]]
  - [[#highlight-indent-guides][Highlight-Indent-Guides]]
- [[#ivy][IVY]]
- [[#language-support][LANGUAGE SUPPORT]]
- [[#org-mode][ORG-MODE]]
  - [[#enable-table-of-contents][Enable Table of Contents]]
  - [[#enable-org-bullets][Enable Org Bullets]]
  - [[#enable-tempo][Enable Tempo]]
- [[#polymode][POLYMODE]]
  - [[#poly-org][Poly-Org]]
  - [[#poly-markdown][Poly-Markdown]]
- [[#projectile][PROJECTILE]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
- [[#sudo-edit][SUDO-EDIT]]
- [[#transparency][TRANSPARENCY]]
- [[#treemacs][TREEMACS]]
- [[#ui][UI]]
  - [[#fonts][Fonts]]
  - [[#icons][Icons]]
  - [[#theme][Theme]]
  - [[#zoom-inout][Zoom In/Out]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncat-lines][Display Line Numbers and Truncat Lines]]
  - [[#disable-bell][Disable Bell]]
- [[#which-key][WHICH-KEY]]

* LOAD FIRST

** Elpaca Package Manager
Juste the package manager.

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.6)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                        :ref nil
                        :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                        :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
        (build (expand-file-name "elpaca/" elpaca-builds-directory))
        (order (cdr elpaca-order))
        (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
      (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                ((zerop (call-process "git" nil buffer t "clone"
                          (plist-get order :repo) repo)))
                ((zerop (call-process "git" nil buffer t "checkout"
                          (or (plist-get order :ref) "--"))))
                (emacs (concat invocation-directory invocation-name))
                ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                ((require 'elpaca))
                ((elpaca-generate-autoloads "elpaca" repo)))
        (progn (message "%s" (buffer-string)) (kill-buffer buffer))
        (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Disable symlink on Windows
(if (eq system-type 'windows-nt)
  (elpaca-no-symlink-mode))

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)
#+end_src

** Load Evil Mode
Enable Vim like navigation and commands.

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-undo-system 'undo-redo)
  (evil-mode))
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
(use-package evil-tutor)
#+end_src

* BUFFER-MOVE
Creating some functions to allow us to easily move windows (splits) around. The following block of code was taken from buffer-move.el found on the EmacsWiki: https://www.emacswiki.org/emacs/buffer-move.el

#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
  "Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	        (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
      (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

* COMPANY
Completion framework.

#+begin_src emacs-lisp
(use-package company
  :defer 2
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :hook (company-mode . company-box-mode))
#+end_src

* DASHBOARD
Fancy startup screen.

#+begin_src emacs-lisp
(use-package dashboard
  :after all-the-icons
  :ensure t
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-icon-type 'all-the-icons)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-init-info nil)
  ;; (setq dashboard-banner-logo-title "Emacs Is More Than Just A Text Editor!")
  ;; (setq dashboard-startup-banner 'loggo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner (concat user-emacs-directory "images/emacs-dash.png")) ;; use cutsom image as banner
  (setq dashboard-center-content nil) ;; set to 't' to center content
  (setq dashboard-items '((recents   . 5)
                           (agenda    . 5)
                           (bookmarks . 3)
                           (projects  . 3)
                           (registers . 3)))
  (add-hook 'dashboard-mode-hook '(lambda () (display-line-numbers-mode -1)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                     (bookmarks . "book")))
  :config
  (advice-add #'dashboard-replace-displayable :override #'identity) ;; fix to display icons on Windows
  (dashboard-setup-startup-hook))
#+end_src

* DIMINISH
NOTE: Makes my config crash!!!
Add the ability to hide or abbreviate modes on the modeline by adding ':diminish'.

#+begin_src emacs-lisp
;;(use-package diminish)
#+end_src

* DIRED
NOTE: Doesn't work.

#+begin_src emacs-lisp
;;(use-package dired-open)

;; (use-package peep-dired
;;   :after dired
;;   :hook (evil-normalize-keymaps . peep-dired-hook)
;;   :config
;;   (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
;;   ;; (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file)
;;   (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
;;   (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))
#+end_src

* FLYCHECK

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :init (global-flycheck-mode))
#+end_src

* GENERAL BEHAVIOR

** Disable Backup Files
Disable the creation of backup files (copies ending with "~").

#+begin_src emacs-lisp
(setq make-backup-files nil)
#+end_src

* GENERAL KEYBINDINGS

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)
  ;; Setup 'SPC' as the global leader key
  (general-create-definer leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode
  ;; Buffer keybindings
  (leader-keys
    "b"   '(:ignore t :wk "Buffer")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-this-buffer :wk "Kill buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Revert buffer"))
  ;; Evaluate keybindings
  (leader-keys
    "e"   '(:ignore t :wk "Eshell/Evaluate")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e c" '(reload-init-file :wk "Reload emacs config")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate elisp expression")
    "e h" '(counsel-esh-history :wk "Eshell history")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e s" '(eshell :wk "Eshell"))
  ;; Find keybindings
  (leader-keys
    "."   '(find-file :wk "Find file")
    "f"   '(:ignore t :wk "Find")
    "f c" '((lambda () (interactive) (find-file (concat user-emacs-directory "config.org"))) :wk "Edit emacs config")
    "f r" '(counsel-recentf :wk "Find recent files"))
  ;; General keybindings
  (leader-keys
    "SPC" '(counsel-M-x :wk "Counsel M-x")
    "TAB TAB" '(comment-line :wk "Comment lines"))
  ;; Help keybindings
  (leader-keys
    "h"   '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable"))
  ;; Org keybindings
  (leader-keys
    "o"   '(:ignore t :wk "Org")
    "o a" '(org-agenda :wk "Org agenda")
    "o e" '(org-export-dispatch :wk "Org export dispatch")
    "o i" '(org-toggle-item :wk "Org toggle item")
    "o t" '(org-todo :wk "Org todo")
    "o B" '(org-babel-tangle :wk "Org babel tangle")
    "o T" '(org-todo-list :wk "Org todo list"))
  ;; Org date keybindings
  (leader-keys
    "o d"   '(:ignore t :wk "Date/Deadline")
    "o d t" '(org-time-stamp :wk "Org time stamp"))
  ;; Org tables keybindings
  (leader-keys
    "o b"   '(:ignore t :wk "Tables")
    "o b -" '(org-table-insert-hline :wk "nsert hline in table"))
  ;; Quit keybindings
  (leader-keys
    "q"   '(:ignore t :wk "Quit")
    "q q" '(kill-emacs :wk "Quit Emacs"))
  ;; Toggle keybindings
  (leader-keys
    "t"   '(:ignore t :wk "Toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    "t v" '(vterm-toggle :wk "Toggle vterm"))
  ;; Window keybindings
  (leader-keys
    "w"   '(:ignore t :wk "Window")
    ;; Window slipts
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Left window")
    "w j" '(evil-window-down :wk "Down window")
    "w k" '(evil-window-up :wk "Up Window")
    "w l" '(evil-window-right :wk "Right window")
    "w w" '(evil-window-next :wk "Next window")
    "w W" '(evil-window-prev :wk "Previous window")
    ;; Move Window
    "w H" '(buf-move-left :wk "Window move left")
    "w J" '(buf-move-down :wk "Window move down")
    "w K" '(buf-move-up :wk "Window move up")
    "w L" '(buf-move-right :wk "Window move down"))
  )
#+end_src

** Reload Emacs
Custom function to reload emacs config, you need to call "(load-file user-init-file)" twice for it to work...

#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src

* INDENTATION
** Change default indentation and TAB behavior.

#+begin_src emacs-lisp
(defun disable-tabs (width)
  (setq indent-tabs-mode nil)
  (setq tab-width width))
(defun enable-tabs (width)
  (setq indent-tabs-mode t)
  (setq tab-width width))

(add-hook 'prog-mode-hook (lambda () (disable-tabs 4)))
(add-hook 'org-mode-hook (lambda () (disable-tabs 2)))
(add-hook 'lisp-mode-hook (lambda () (disable-tabs 2)))
(add-hook 'emacs-lisp-mode-hook (lambda () (disable-tabs 2)))
#+end_src

** Language Specific behavior

#+begin_src emacs-lisp
;; C/C++
(setq-default c-basic-offset 4)
;; Lisp
(setq-default lisp-indent-offset 2)
(setq-default lisp-body-indent 2)
;; Org
(setq-default org-edit-src-content-indentation 0)
;; (setq-default org-src-preserve-indentation t)
;; (setq-default org-src-tab-acts-natively t)
;; (setq-default org-src-fontify-natively t)
;; (setq-default org-startup-indented t)
;; (setq-default org-indented-mode t)
#+end_src

** Aggressive Indent

#+begin_src emacs-lisp
(use-package aggressive-indent
  :config
  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-dont-indent-if '(and (derived-mode-p 'c-mode) (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)" (thing-at-point 'line))))))
#+end_src

** Highlight-Indent-Guides
Highlight indentation.

#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :config
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-auto-enabled nil)
  ;; (set-face-foreground 'highlight-indent-guides-character-face vscode-dark-modern-highlight-indent-character)
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
;; (add-hook 'org-mode-hook 'highlight-indent-guides-mode))
#+end_src

* IVY
+ Ivy, a generic completion framework.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :config (counsel-mode))

(use-package ivy
  :bind
  (("C-c C-r" . ivy-resume) ;; resumes last Ivy-based completion
    ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :after all-the-icons
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; enable descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
    ivy-rich-switch-buffer-align-virtual-buffer t
    ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
    'ivy-rich-switch-buffer-transformer))
#+end_src

* LANGUAGE SUPPORT

#+begin_src emacs-lisp
(use-package lua-mode)
#+end_src

* ORG-MODE

** Enable Table of Contents
Add usefull table of contents.

#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enable Org Bullets
Good looking bullets instead of astericks.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src


** Enable Tempo

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

* POLYMODE
Polymode is a framework for multiple major modes (MMM) inside a single Emacs buffer.

** Poly-Org

#+begin_src emacs-lisp
(use-package poly-org
  :ensure t
  :config
  (add-hook 'org-mode-hook 'poly-org-mode))
#+end_src

** Poly-Markdown

#+begin_src emacs-lisp
(use-package poly-markdown
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode)))
#+end_src

* PROJECTILE
Project interaction library

#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode 1))
#+end_src

* RAINBOW MODE
Display the actual of any hex color value.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook org-mode prog-mode)
#+end_src

* SHELLS AND TERMINALS

** Eshell
An Emacs shell.

#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile") ;; eshell profile
  eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
  eshell-history-size 5000
  eshell-buffer-maximum-lines 5000
  eshell-hist-ignoredups t
  eshell-scroll-to-bottom-on-input t
  eshell-destroy-buffer-when-process-dies t
  eshell-visual-commands'("bash" "btop" "fish" "ssh" "top" "zsh"))
#+end_src

** Vterm

#+begin_src emacs-lisp
;; Disable Vterm if on Windows because it doesn't work on it
(if (not (eq system-type 'windows-nt))
  (use-package vterm
    :config
    (setq shell-file-name "/usr/bin/zsh"
      vterm-max-scrollback 5000)))
#+end_src

** Vterm-Toggle

#+begin_src emacs-lisp
(if (not (eq system-type 'windows-nt))
  (use-package vterm-toggle
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
      '((lambda (buffer-or-name _)
          (let ((buffer (get-buffer buffer-or-name)))
            (with-current-buffer buffer
              (or (equal major-mode 'vterm-mode)
                (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
         (display-buffer-reuse-window display-buffer-at-bottom)
         ;;(display-buffer-reuse-window display-buffer-in-direction)
         ;;display-buffer-in-direction/direction/dedicated is added in emacs27
         ;;(direction . bottom)
         ;;(dedicated . t) ;dedicated is supported in emacs27
         (reusable-frames . visible)
         (window-height . 0.3)))))
#+end_src

* SUDO-EDIT
Allow to open and edit files with sudo privileges.

#+begin_src emacs-lisp
(use-package sudo-edit
  :config
  (leader-keys
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* TRANSPARENCY
Features for Emacs >=29.

#+begin_src emacs-lisp
;; (add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src

* TREEMACS

#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t)

(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-all-the-icons
  :after (treemacs all-the-icons)
  :ensure t
  :init
  (treemacs-load-theme "all-the-icons"))
#+end_src

* UI

** Fonts

#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "JetBrainsMonoNL Nerd Font"
  :height 110
  :weight 'regular)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu"
  :height 120
  :weight 'regular)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrainsMonoNL Nerd Font"
  :height 110
  :weight 'regular)
;; Make commented text italic
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
;; Make keyword italic
;;(set-face-attribute 'font-lock-keyword-face nil
;;  :slant 'italic)

(add-to-list 'default-frame-alist '(font . "JetBrainsMonoNL Nerd Font-11"))

;; Change line spacing
;; (setq-default line-spacing 0.12)
(setq-default line-spacing 0)
#+end_src

** Icons

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Theme

#+begin_src emacs-lisp
;; (add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes/"))
;; (load-theme 'vscode-dark-modern t)
(use-package catppuccin-theme
  :ensure t
  :config
  (load-theme 'catppuccin t)
  (catppuccin-load-flavor 'mocha))
#+end_src

** Zoom In/Out

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C-)") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Disable Menubar, Toolbars and Scrollbars

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncat Lines

#+begin_src emacs-lisp
(global-visual-line-mode t)
(global-display-line-numbers-mode t)
;; (add-hook 'prog-mode-hook '(lambda () (display-line-numbers-mode t)))
;; (add-hook 'org-mode-hook '(lambda () (display-line-numbers-mode t)))
#+end_src

** Disable Bell
Disable the annoying bell sound.

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

* WHICH-KEY

#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
    which-key-sort-order #'which-key-key-order-alpha
    which-key-sort-uppercase-first nil
    which-key-add-column-padding 1
    which-key-max-display-columns nil
    which-key-min-display-lines 6
    which-key-side-window-slot -10
    which-key-side-window-max-height 0.25
    which-key-idle-delay 0.8
    which-key-max-description-length 25
    which-key-allow-imprecise-window-fit nil
    which-key-separator " → " ))
#+end_src
